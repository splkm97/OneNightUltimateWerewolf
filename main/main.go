package main

import (
	"OneNightUltimateWerewolf/main/WF"
	"flag"
	"fmt"
	"os"
	"os/signal"
	"strconv"
	"strings"
	"syscall"
	"time"

	"github.com/bwmarrin/discordgo"
)

const (
	MaxUser = 6
	prefix  = "„Ñ¥"
	eBin    = "üöÆ"
	eOne    = "1Ô∏è‚É£"
	eTwo    = "2Ô∏è‚É£"
	eThree  = "3Ô∏è‚É£"
	eFour   = "4Ô∏è‚É£"
	eFive   = "5Ô∏è‚É£"
	eSix    = "6Ô∏è‚É£"
	eSeven  = "7Ô∏è‚É£"
	eEight  = "8Ô∏è‚É£"
	eNine   = "9Ô∏è‚É£"
	eTen    = "üîü"
)

var (
	hwUserIDs []string
)

// Variables used for command line parameters
var (
	Token     string
	eNum      []string
	isGuildIn map[string]bool
	isUserIn  map[string]bool
	uidToGid  map[string]string
	wfDataMap map[string]*WF.WFData
)

func init() {
	hwUserIDs = make([]string, 0, 10)

	eNum = []string{eOne, eTwo, eThree, eFour, eFive, eSix, eSeven, eEight, eNine, eTen}

	uidToGid = make(map[string]string)
	isGuildIn = make(map[string]bool)
	isUserIn = make(map[string]bool)
	wfDataMap = make(map[string]*WF.WFData)
	flag.StringVar(&Token, "t", "NzYyNjUzOTczNjgwODgxNjg1.X3sS3A.Goy20AhNusZK4kGbLYJe1r8w1UA", "Bot Token")
	flag.Parse()
}

func main() {

	// Create a new Discord session using the provided bot token.
	dg, err := discordgo.New("Bot " + Token)
	if err != nil {
		fmt.Println("error creating Discord session,", err)
		return
	}

	// Register the messageCreate func as a callback for MessageCreate events.
	dg.AddHandler(messageReactionAdd)
	dg.AddHandler(messageCreate)

	// Open a websocket connection to Discord and begin listening.
	err = dg.Open()
	if err != nil {
		fmt.Println("error opening connection,", err)
		return
	}

	// Wait here until CTRL-C or other term signal is received.
	fmt.Println("Bot is now running.  Press CTRL-C to exit.")
	sc := make(chan os.Signal, 1)
	signal.Notify(sc, syscall.SIGINT, syscall.SIGTERM, os.Interrupt, os.Kill)
	<-sc

	// Cleanly close down the Discord session.
	_ = dg.Close()
}

func messageReactionAdd(s *discordgo.Session, r *discordgo.MessageReactionAdd) {
	if r.UserID == s.State.User.ID {
		return
	}
	if !isUserIn[r.UserID] {
		return
	}

	gid := uidToGid[r.UserID]
	wfd := wfDataMap[gid]
	if wfd.CurStage == "Werewolf_only" {
		if wfd.UserRole[r.UserID] == "ÎäëÎåÄÏù∏Í∞Ñ" {
			if r.Emoji.Name == eOne {
				s.ChannelMessageDelete(r.ChannelID, r.MessageID)
				uChan, _ := s.UserChannelCreate(r.UserID)
				go func() {
					time.Sleep(10 * time.Second)
					wfd.TimingChan <- true
				}()
				s.ChannelMessageSend(uChan.ID, "<1Î≤à: `"+wfd.CardDeck.Cards[0]+"` >")
			}
			if r.Emoji.Name == eTwo {
				s.ChannelMessageDelete(r.ChannelID, r.MessageID)
				uChan, _ := s.UserChannelCreate(r.UserID)
				go func() {
					time.Sleep(10 * time.Second)
					wfd.TimingChan <- true
				}()
				s.ChannelMessageSend(uChan.ID, "<2Î≤à: `"+wfd.CardDeck.Cards[1]+"` >")
			}
			if r.Emoji.Name == eThree {
				s.ChannelMessageDelete(r.ChannelID, r.MessageID)
				uChan, _ := s.UserChannelCreate(r.UserID)
				go func() {
					time.Sleep(10 * time.Second)
					wfd.TimingChan <- true
				}()
				s.ChannelMessageSend(uChan.ID, "<3Î≤à: `"+wfd.CardDeck.Cards[2]+"` >")
			}
		}
	}
	if wfd.CurStage == "Seer" {
		if wfd.UserRole[r.UserID] == "ÏòàÏñ∏Ïûê" {
			if r.Emoji.Name == eBin {
				s.ChannelMessageDelete(r.ChannelID, r.MessageID)
				wfd.CurStage = "Seer_trash"
				msg, _ := s.ChannelMessageSend(r.ChannelID, "Î≥¥ÏßÄ ÏïäÍ≥† ÎçÆÏñ¥Îëò Ïπ¥ÎìúÎ•º Í≥†Î•¥ÏãúÏò§\n< 1 > < 2 > < 3 >")
				s.MessageReactionAdd(r.ChannelID, msg.ID, eOne)
				s.MessageReactionAdd(r.ChannelID, msg.ID, eTwo)
				s.MessageReactionAdd(r.ChannelID, msg.ID, eThree)
			}
			for i := 0; i < len(wfd.UserIDs); i++ {
				if r.Emoji.Name == eNum[i] {
					if wfd.UserIDs[i] != r.UserID {
						s.ChannelMessageDelete(r.ChannelID, r.MessageID)
						wfd.CurStage = "Seer_used_power"
						powerMsg := strconv.Itoa(i+1) + "Î≤àÏß∏ Ïú†Ï†ÄÎäî `" + wfd.UserRole[wfd.UserIDs[i]] + "` ÏûÖÎãàÎã§."
						go func() {
							time.Sleep(5 * time.Second)
							wfd.TimingChan <- true
						}()
						s.ChannelMessageSend(r.ChannelID, powerMsg)
					}
				}
			}
		}
	}
	if wfd.CurStage == "Seer_trash" {
		if wfd.UserRole[r.UserID] == "ÏòàÏñ∏Ïûê" {
			trashMsg := ""
			if r.Emoji.Name == eOne {
				s.ChannelMessageDelete(r.ChannelID, r.MessageID)
				trashMsg += "<2Î≤à: " + wfd.CardDeck.Cards[1] + "> <3Î≤à: " + wfd.CardDeck.Cards[2] + ">"
				go func() {
					time.Sleep(5 * time.Second)
					wfd.TimingChan <- true
				}()
				s.ChannelMessageSend(r.ChannelID, trashMsg)
			}
			if r.Emoji.Name == eTwo {
				s.ChannelMessageDelete(r.ChannelID, r.MessageID)
				trashMsg += "<1Î≤à: " + wfd.CardDeck.Cards[0] + "> <3Î≤à: " + wfd.CardDeck.Cards[2] + ">"
				go func() {
					time.Sleep(5 * time.Second)
					wfd.TimingChan <- true
				}()
				s.ChannelMessageSend(r.ChannelID, trashMsg)
			}
			if r.Emoji.Name == eThree {
				s.ChannelMessageDelete(r.ChannelID, r.MessageID)
				trashMsg += "<1Î≤à: " + wfd.CardDeck.Cards[0] + "> <2Î≤à: " + wfd.CardDeck.Cards[1] + ">"
				go func() {
					time.Sleep(5 * time.Second)
					wfd.TimingChan <- true
				}()
				s.ChannelMessageSend(r.ChannelID, trashMsg)
			}
		}
	}
	if wfd.CurStage == "Robber" {
		if wfd.UserRole[r.UserID] == "Í∞ïÎèÑ" {
			robberMsg := ""
			for i := 0; i < len(wfd.UserIDs); i++ {
				if r.Emoji.Name == eNum[i] {
					if wfd.UserIDs[i] != r.UserID {
						s.ChannelMessageDelete(r.ChannelID, r.MessageID)
						user, _ := s.User(wfd.UserIDs[i])
						robberMsg = user.Username + "ÏùÄ `" + wfd.FinalRole[wfd.UserIDs[i]] + "` Ïù¥ÏóàÏäµÎãàÎã§. ÌïòÏßÄÎßå Ïù¥Ï†† ÏïÑÎãàÏ£†."
						wfd.FinalRole[r.UserID] = wfd.FinalRole[wfd.UserIDs[i]]
						wfd.FinalRole[wfd.UserIDs[i]] = "Í∞ïÎèÑ"
						go func() {
							time.Sleep(5 * time.Second)
							wfd.TimingChan <- true
						}()
						s.ChannelMessageSend(r.ChannelID, robberMsg)
					}
				}
			}
		}
	}
	if wfd.CurStage == "TroubleMaker" {
		if wfd.UserRole[r.UserID] == "ÎßêÏçΩÏüÅÏù¥" {
			tmMsg := ""
			for i := 0; i < len(wfd.UserIDs); i++ {
				if r.Emoji.Name == eNum[i] {
					if wfd.UserIDs[i] != r.UserID {
						wfd.CurStage = "TroubleMaker_oneMoreChoice"
						wfd.IndexChan <- i
						s.ChannelMessageDelete(r.ChannelID, r.MessageID)
						user, _ := s.User(wfd.UserIDs[i])
						selectMsg := "`" + user.Username + "`ÎãòÏùÑ ÏÑ†ÌÉùÌïòÏòÄÏäµÎãàÎã§."
						s.ChannelMessageSend(r.ChannelID, selectMsg)
						index := len(wfd.UserIDs)
						for j := 0; j < len(wfd.UserIDs); j++ {
							if i == j {
								index = j
								break
							}
							if wfd.UserRole[wfd.UserIDs[j]] == "ÎßêÏçΩÏüÅÏù¥" {
								tmMsg += "~~"
							}
							user, _ := s.User(wfd.UserIDs[j])
							tmMsg += "<" + strconv.Itoa(j+1) + "Î≤à ÏÇ¨Ïö©Ïûê: " + user.Username + "> "
							if wfd.UserRole[wfd.UserIDs[j]] == "ÎßêÏçΩÏüÅÏù¥" {
								tmMsg += "~~"
							}
						}
						for j := index + 1; j < len(wfd.UserIDs); j++ {
							if wfd.UserRole[wfd.UserIDs[j]] == "ÎßêÏçΩÏüÅÏù¥" {
								tmMsg += "~~"
							}
							user, _ := s.User(wfd.UserIDs[j])
							tmMsg += "<" + strconv.Itoa(j) + "Î≤à ÏÇ¨Ïö©Ïûê: " + user.Username + "> "
							if wfd.UserRole[wfd.UserIDs[j]] == "ÎßêÏçΩÏüÅÏù¥" {
								tmMsg += "~~"
							}
						}
						msg, _ := s.ChannelMessageSend(r.ChannelID, tmMsg)
						for i := 0; i < len(wfd.UserIDs)-1; i++ {
							s.MessageReactionAdd(r.ChannelID, msg.ID, eNum[i])
						}
					}
				}
			}
		}
	}
	if wfd.CurStage == "TroubleMaker_oneMoreChoice" {
		if wfd.UserRole[r.UserID] == "ÎßêÏçΩÏüÅÏù¥" {
			prev := <-wfd.IndexChan
			index := len(wfd.UserIDs)
			for i := 0; i < len(wfd.UserIDs); i++ {
				if i == prev {
					index = i
					break
				}
				if wfd.UserIDs[i] != r.UserID {
					if r.Emoji.Name == eNum[i] {
						s.ChannelMessageDelete(r.ChannelID, r.MessageID)
						user, _ := s.User(wfd.UserIDs[i])
						tmMsg := "`" + user.Username + "` ÎãòÏùÑ ÏÑ†ÌÉùÌïòÏòÄÏäµÎãàÎã§."
						s.ChannelMessageSend(r.ChannelID, tmMsg)
						temp := wfd.FinalRole[wfd.UserIDs[i]]
						wfd.FinalRole[wfd.UserIDs[i]] = wfd.FinalRole[wfd.UserIDs[prev]]
						wfd.FinalRole[wfd.UserIDs[prev]] = temp
						go func() {
							time.Sleep(5 * time.Second)
							wfd.TimingChan <- true
						}()
						s.ChannelMessageSend(r.ChannelID, "ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÍµêÌôòÎêòÏóàÏäµÎãàÎã§.")
					}
				}
			}
			for i := index + 1; i < len(wfd.UserIDs); i++ {
				if wfd.UserIDs[i] != r.UserID {
					if r.Emoji.Name == eNum[i-1] {
						s.ChannelMessageDelete(r.ChannelID, r.MessageID)
						user, _ := s.User(wfd.UserIDs[i])
						tmMsg := "`" + user.Username + "` ÎãòÏùÑ ÏÑ†ÌÉùÌïòÏòÄÏäµÎãàÎã§."
						s.ChannelMessageSend(r.ChannelID, tmMsg)
						temp := wfd.FinalRole[wfd.UserIDs[i]]
						wfd.FinalRole[wfd.UserIDs[i]] = wfd.FinalRole[wfd.UserIDs[prev]]
						wfd.FinalRole[wfd.UserIDs[prev]] = temp
						go func() {
							time.Sleep(5 * time.Second)
							wfd.TimingChan <- true
						}()
						s.ChannelMessageSend(r.ChannelID, "ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÍµêÌôòÎêòÏóàÏäµÎãàÎã§.")
					}
				}
			}
		}
	}
	if wfd.CurStage == "Election" {
		for _, item := range wfd.UserIDs {
			go func(uid string) {
				if uid == r.UserID {
					for i := 0; i < len(wfd.UserIDs); i++ {
						if r.Emoji.Name == eNum[i] {
							s.ChannelMessageDelete(r.ChannelID, r.MessageID)
							selCandi := wfd.UserIDs[i]
							voteUser, _ := s.User(uid)
							selUser, _ := s.User(selCandi)
							s.ChannelMessageSend(r.ChannelID, "`"+
								selUser.Username+"` ÎãòÏóêÍ≤å Ìà¨ÌëúÌïòÏòÄÏäµÎãàÎã§.")
							wfd.ElectChan <- WF.NewElectInfo(voteUser.Username, selCandi)
						}
					}
				}
			}(item)
		}
	}
}

// This function will be called (due to AddHandler above) every time a new
// message is created on any channel that the authenticated bot has access to.
func messageCreate(s *discordgo.Session, m *discordgo.MessageCreate) {
	// Ignore all messages created by the bot itself
	// This isn't required in this specific example but it's a good practice.
	if m.Author.ID == s.State.User.ID {
		return
	}

	if strings.HasPrefix(m.Content, prefix) { // ÌîÑÎ¶¨ÌîΩÏä§Î°ú ÏãúÏûëÌïòÎäî Î©îÏãúÏßÄÏùº Í≤ΩÏö∞
		var wfd *WF.WFData

		if m.Content == prefix+"Í∞ïÏ†úÏ¢ÖÎ£å" {
			wfd = wfDataMap[m.GuildID]
			s.ChannelMessageSend(wfd.UseChannelID, "ÏïàÏ†ÑÌïòÍ≤å Í∞ïÏ†úÏ¢ÖÎ£å ÏàòÌñâÏ§ë..")
			time.Sleep(time.Second * 5)
			cancelGameTask(m)
			s.ChannelMessageSend(wfd.UseChannelID, "ÏÇ¨Ïö© Ï¢ÖÎ£åÍ∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.")
		}

		if m.Content == prefix+"ÏãúÏûë" && !isGuildIn[m.GuildID] {
			isGuildIn[m.GuildID] = true
			wfDataMap[m.GuildID] = WF.NewWFData(m.Author.ID, m.ChannelID)
			wfDataMap[m.GuildID].CurStage = "Prepare"
			newUserTask(m)
			_, _ = s.ChannelMessageSend(m.ChannelID, "Í≤åÏûÑ ÏãúÏûë!\n`"+prefix+"ÏûÖÏû•` ÏúºÎ°ú ÏûÖÏû•ÌïòÏÑ∏Ïöî")
		}
		if isGuildIn[m.GuildID] {
			wfd = wfDataMap[m.GuildID]
			if m.Content == prefix+"ÏûÖÏû•" && wfd.CurStage == "Prepare" {
				if isUserIn[m.Author.ID] {
					s.ChannelMessageSend(m.ChannelID, "Ïù¥ÎØ∏ ÏûÖÏû•Ìïú Ïú†Ï†ÄÏûÖÎãàÎã§.")
					return
				}
				newUserTask(m)
				s.ChannelMessageSend(m.ChannelID, m.Author.Mention()+"ÎãòÏù¥ ÏûÖÏû•ÌïòÏÖ®ÏäµÎãàÎã§.")
			}
			if m.Author.ID == wfd.AdminUserID && m.Content == prefix+"Ï∑®ÏÜå" && wfd.CurStage == "Prepare" {
				cancelGameTask(m)
				s.ChannelMessageSend(m.ChannelID, "Í≤åÏûÑÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.")
			}
			if m.Author.ID == wfd.AdminUserID && strings.HasPrefix(m.Content, prefix+"ÎçîÎØ∏Ï∂îÍ∞Ä") && wfd.CurStage == "Prepare" {
				sepMsg := strings.Split(m.Content, " ")
				if len(sepMsg) == 1 {
					s.ChannelMessageSend(m.ChannelID, "Ï∂îÍ∞ÄÌï† Ïù∏Ïõê Ïà´ÏûêÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.")
					return
				}
				num, err := strconv.Atoi(sepMsg[1])
				if err != nil {
					s.ChannelMessageSend(m.ChannelID, "Ïà´ÏûêÍ∞Ä ÏïÑÎãåÍ±∏ ÏûÖÎ†•ÌñàÎÑ§Ïöî....")
				}
				for i := 0; i < num; i++ {
					newUserTask(m)
				}
				s.ChannelMessageSend(m.ChannelID, "ÌòÑÏû¨Ïù∏Ïõê: ("+strconv.Itoa(len(wfd.UserIDs))+"/6)")
			}
			if strings.HasPrefix(m.Content, prefix+"ÎßàÍ∞ê") && wfd.CurStage == "Prepare" {
				if len(wfd.UserIDs) == 6 {
					wfd.CurStage = "Prepare_finishing"
					for _, item := range wfd.UserIDs {
						go func(uid string) {
							uChan, _ := s.UserChannelCreate(uid)
							user, _ := s.User(uid)
							wfd.GameLog += "> `" + user.Username + "` ÎãòÏùò Ïó≠Ìï†Ïù¥ `" + wfd.UserRole[uid] + "` Î°ú Î∞∞Ï†ïÎêòÏóàÏäµÎãàÎã§.\n"
							roleBrief := "> **ÎãπÏã†Ïùò Ïó≠Ìï†ÏùÄ **`" + wfd.UserRole[uid] + "`**ÏûÖÎãàÎã§.**\n"
							roleBrief += getRoleInfo(wfd.UserRole[uid])
							s.ChannelMessageSend(uChan.ID, roleBrief)
						}(item)
					}
					wfd.CurStage = "Werewolf"
					werewolfTask(s, wfd)
					minionTask(s, wfd)
					seerTask(s, wfd)
					robberTask(s, wfd)
					tmTask(s, wfd)
					insomniacTask(s, wfd)
					dayBriefTask(s, wfd)
				} else {
					s.ChannelMessageSend(m.ChannelID, "Ï†ïÌôïÌïú Ïù∏ÏõêÏù¥ Î™®Ïù¥ÏßÄ ÏïäÏïòÏäµÎãàÎã§. ("+strconv.Itoa(len(wfd.UserIDs))+"/"+strconv.Itoa(MaxUser)+")")
				}
			}
		}
	}

	homeworkMethod(s, m)
}

func dayBriefTask(s *discordgo.Session, wfd *WF.WFData) {
	briefMsg := ""

	briefMsg += "> Î™®Îì† ÌäπÏàò Îä•Î†• ÏÇ¨Ïö©Ïù¥ ÎÅùÎÇ¨ÏäµÎãàÎã§." +
		"\n> 3Î∂Ñ ÌõÑ Ïó¨Îü¨Î∂ÑÎì§ÏóêÍ≤å Í∞ÅÏûêÏùò Ìà¨Ìëú Ïö©ÏßÄÍ∞Ä Ï†ÑÏÜ°Îê©ÎãàÎã§." +
		"\n> ÌïúÎ≤à Ìà¨ÌëúÌïú ÎÇ¥Ïö©ÏùÄ Î∞îÍøÄ Ïàò ÏóÜÍ∏∞Ïóê, Ïã†Ï§ëÌïòÍ≤å Ìà¨ÌëúÌïòÏÑ∏Ïöî" +
		"\n"
	go func() {
		time.Sleep(time.Minute * 3)
		wfd.TimingChan <- true
	}()
	s.ChannelMessageSend(wfd.UseChannelID, briefMsg)
	userChans := make([]string, 0, 10)
	userNames := make([]string, 0, 10)
	for _, item := range wfd.UserIDs {
		user, _ := s.User(item)
		uChan, _ := s.UserChannelCreate(item)
		userChans = append(userChans, uChan.ID)
		userNames = append(userNames, user.Username)
	}
	briefMsg = ""
	for i, item := range userNames {
		briefMsg += "<" + strconv.Itoa(i+1) + "Î≤à: " + item + "> "
	}
	<-wfd.TimingChan
	wfd.CurStage = "Election"
	for _, cid := range userChans {
		go func(item string) {
			msg, _ := s.ChannelMessageSend(item, briefMsg)
			for i := 0; i < len(wfd.UserIDs); i++ {
				s.MessageReactionAdd(item, msg.ID, eNum[i])
			}
		}(cid)
	}
	electFinishTask(s, wfd)
}

func electFinishTask(s *discordgo.Session, wfd *WF.WFData) {
	electData := make([]*WF.ElectInfo, 0, 10)
	electResult := make([]int, len(wfd.UserIDs))
	s.ChannelMessageSend(wfd.UseChannelID, "> Ìà¨ÌëúÎ•º ÏãúÏûëÌï©ÎãàÎã§!")
	for i := 0; i < len(wfd.UserIDs); i++ {
		electData = append(electData, <-wfd.ElectChan)
		electAlarmMsg := "`" + electData[i].VoterName + "`ÎãòÏù¥ Ìà¨ÌëúÌïòÏÖ®ÏäµÎãàÎã§."
		s.ChannelMessageSend(wfd.UseChannelID, electAlarmMsg)
	}
	s.ChannelMessageSend(wfd.UseChannelID, "> Ìà¨ÌëúÍ∞Ä ÎÅùÎÇ¨ÏäµÎãàÎã§.")
	s.ChannelMessageSend(wfd.UseChannelID, "Í≤∞Í≥º Í≥ÑÏÇ∞Ï§ë...")
	for i, uid := range wfd.UserIDs {
		for _, elc := range electData {
			if uid == elc.CandiID {
				electResult[i]++
			}
		}
	}
	electResultMsg := "> Ìà¨Ìëú Í≤∞Í≥º :\n"
	max := 0
	maxi := -1
	maxName := ""
	for i, item := range electResult {
		if max < item {
			max = item
			maxi = i
		}
		if item != 0 {
			user, _ := s.User(wfd.UserIDs[i])
			if maxi == i {
				maxName = user.Username
			}
			electResultMsg += "<`" + user.Username + "` : " + strconv.Itoa(item) + "Ìëú>\n"
		}
	}
	electResultMsg += "> `" + maxName + "` ÎãòÏù¥ Ï¥ù " + strconv.Itoa(electResult[maxi]) + " ÌëúÎ°ú Ï≤òÌòïÎãπÌïòÏòÄÏäµÎãàÎã§."
	s.ChannelMessageSend(wfd.UseChannelID, electResultMsg)
	s.ChannelMessageSend(wfd.UseChannelID, "`"+maxName+"` ÎãòÏùò ÏßÅÏóÖÏùÄ..?")
	for i := 0; i < 3; i++ {
		s.ChannelMessageSend(wfd.UseChannelID, "...")
		time.Sleep(time.Second)
	}
	s.ChannelMessageSend(wfd.UseChannelID, "`"+wfd.UserRole[wfd.UserIDs[maxi]]+
		"` -> `"+wfd.FinalRole[wfd.UserIDs[maxi]]+"` ÏûÖÎãàÎã§.")
}

func werewolfTask(s *discordgo.Session, wfd *WF.WFData) {
	s.ChannelMessageSend(wfd.UseChannelID, "ÎäëÎåÄÏù∏Í∞ÑÏùò Ï∞®Î°ÄÏûÖÎãàÎã§.")
	wfd.GameLog += "> ÎäëÎåÄÏù∏Í∞ÑÏùò Ï∞®Î°Ä"
	wolvesID := make([]string, 0, 10)
	for _, item := range wfd.UserIDs {
		if wfd.UserRole[item] == "ÎäëÎåÄÏù∏Í∞Ñ" {
			wolvesID = append(wolvesID, item)
		}
	}
	if len(wolvesID) != 1 {
		go func() {
			time.Sleep(40 * time.Second)
			wfd.CurStage = "Minion"
			wfd.TimingChan <- true
		}()
	}

	if len(wolvesID) == 1 {
		wfd.CurStage = "Werewolf_only"

		wolvesMsg := "20Ï¥à ÏïàÏóê ÏÑ∏ Ïû•Ïùò ÎπÑÍ≥µÍ∞ú Ïπ¥Îìú Ï§ë Ìïú Ïû•ÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî"
		wolvesMsg += "< 1 > < 2 > < 3 >"
		uChan, _ := s.UserChannelCreate(wolvesID[0])
		msg, _ := s.ChannelMessageSend(uChan.ID, wolvesMsg)
		s.MessageReactionAdd(uChan.ID, msg.ID, eOne)
		s.MessageReactionAdd(uChan.ID, msg.ID, eTwo)
		s.MessageReactionAdd(uChan.ID, msg.ID, eThree)
		<-wfd.TimingChan
		s.ChannelMessageSend(uChan.ID, "ÎãπÏã†Ïùò Ï∞®Î°ÄÍ∞Ä ÎÅùÎÇ¨ÏäµÎãàÎã§.")
		s.ChannelMessageSend(wfd.UseChannelID, "ÎäëÎåÄÏù∏Í∞ÑÏùò Ï∞®Î°Ä Ï¢ÖÎ£å")
		return
	}
	for _, item := range wolvesID {
		uChan, _ := s.UserChannelCreate(item)
		wolvesMsg := "ÎäëÎåÄÏù∏Í∞Ñ: "
		for _, item := range wolvesID {
			user, _ := s.User(item)
			wolvesMsg += "<" + user.Username + "> "
		}
		s.ChannelMessageSend(uChan.ID, wolvesMsg)

	}
	<-wfd.TimingChan
	s.ChannelMessageSend(wfd.UseChannelID, "ÎäëÎåÄÏù∏Í∞ÑÏùò Ï∞®Î°Ä Ï¢ÖÎ£å.")
}

func minionTask(s *discordgo.Session, wfd *WF.WFData) {
	s.ChannelMessageSend(wfd.UseChannelID, "ÌïòÏàòÏù∏Ïùò Ï∞®Î°ÄÏûÖÎãàÎã§.")

	wolvesID := make([]string, 0, 10)
	minionID := ""
	for _, item := range wfd.UserIDs {
		if wfd.UserRole[item] == "ÎäëÎåÄÏù∏Í∞Ñ" {
			wolvesID = append(wolvesID, item)
		}
		if wfd.UserRole[item] == "ÌïòÏàòÏù∏" {
			minionID = item
		}
	}
	go func() {
		time.Sleep(time.Second * 10)
		wfd.CurStage = "Seer"
		wfd.TimingChan <- true
	}()
	minionMsg := "ÎäëÎåÄÏù∏Í∞ÑÏùÄ, "
	for _, item := range wolvesID {
		user, _ := s.User(item)
		minionMsg += "<" + user.Username + "> "
	}
	minionMsg += "ÏûÖÎãàÎã§."

	if len(wolvesID) == 0 {
		minionMsg = "ÎäëÎåÄÏù∏Í∞ÑÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§."
	}

	user, err := s.User(minionID)
	if err != nil {
		<-wfd.TimingChan
		s.ChannelMessageSend(wfd.UseChannelID, "ÌïòÏàòÏù∏Ïùò Ï∞®Î°Ä Ï¢ÖÎ£å.")
		return
	}

	uChan, _ := s.UserChannelCreate(user.ID)
	s.ChannelMessageSend(uChan.ID, minionMsg)
	<-wfd.TimingChan
	s.ChannelMessageSend(wfd.UseChannelID, "ÌïòÏàòÏù∏Ïùò Ï∞®Î°Ä Ï¢ÖÎ£å.")
}

func seerTask(s *discordgo.Session, wfd *WF.WFData) {
	s.ChannelMessageSend(wfd.UseChannelID, "ÏòàÏñ∏ÏûêÏùò Ï∞®Î°ÄÏûÖÎãàÎã§.")
	seerID := ""
	seerMsg := "30Ï¥à ÏïàÏóê Î≤ÑÎ†§ÏßÑ Ïπ¥ÎìúÏ§ë 2Ïû• ÎòêÎäî, ÌôïÏù∏ÌïòÍ≥†Ïã∂ÏùÄ ÏÇ¨Îûå Ìïú Î™ÖÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî\nÏûêÏã†ÏùÄ ÏÑ†ÌÉùÌï† Ïàò ÏóÜÏñ¥Ïöî\t(" + eBin + "): Î≤ÑÎ†§ÏßÑ Ïπ¥ÎìúÏóêÏÑú Í≥†Î•¥Í∏∞\n"
	for i, item := range wfd.UserIDs {
		if wfd.UserRole[item] == "ÏòàÏñ∏Ïûê" {
			seerID = item
			seerMsg += "~~"
		}
		user, _ := s.User(item)
		seerMsg += "<" + strconv.Itoa(i+1) + "Î≤à ÏÇ¨Ïö©Ïûê: " + user.Username + ">\t"
		if wfd.UserRole[item] == "ÏòàÏñ∏Ïûê" {
			seerMsg += "~~"
		}
	}
	if seerID == "" {
		go func() {
			time.Sleep(40 * time.Second)
			wfd.CurStage = "Robber"
			wfd.TimingChan <- true
		}()
	}
	if seerID == "" {
		<-wfd.TimingChan
		s.ChannelMessageSend(wfd.UseChannelID, "ÏòàÏñ∏ÏûêÏùò Ï∞®Î°Ä Ï¢ÖÎ£å.")
		return
	}
	uChan, _ := s.UserChannelCreate(seerID)
	msg, _ := s.ChannelMessageSend(uChan.ID, seerMsg)
	s.MessageReactionAdd(uChan.ID, msg.ID, eBin)
	for i := 0; i < len(wfd.UserIDs); i++ {
		s.MessageReactionAdd(uChan.ID, msg.ID, eNum[i])
	}

	<-wfd.TimingChan
	s.ChannelMessageSend(wfd.UseChannelID, "ÏòàÏñ∏ÏûêÏùò Ï∞®Î°Ä Ï¢ÖÎ£å.")
}

func robberTask(s *discordgo.Session, wfd *WF.WFData) {
	s.ChannelMessageSend(wfd.UseChannelID, "Í∞ïÎèÑÏùò Ï∞®Î°ÄÏûÖÎãàÎã§.")

	robberID := ""
	robberMsg := "ÏûêÏã†ÏùÄ ÏÑ†ÌÉùÌï† Ïàò ÏóÜÏñ¥Ïöî\n"
	for i, item := range wfd.UserIDs {
		if wfd.UserRole[item] == "Í∞ïÎèÑ" {
			robberID = item
			robberMsg += "~~"
		}
		user, _ := s.User(item)
		robberMsg += "<" + strconv.Itoa(i+1) + "Î≤à ÏÇ¨Ïö©Ïûê: " + user.Username + ">\t"
		if wfd.UserRole[item] == "Í∞ïÎèÑ" {
			robberMsg += "~~"
		}
	}
	if robberID == "" {
		go func() {
			time.Sleep(30 * time.Second)
			wfd.CurStage = "TroubleMaker"
			wfd.TimingChan <- true
		}()
	}
	if robberID == "" {
		<-wfd.TimingChan
		wfd.CurStage = "TroubleMaker"
		s.ChannelMessageSend(wfd.UseChannelID, "Í∞ïÎèÑÏùò Ï∞®Î°Ä Ï¢ÖÎ£å.")
		return
	}
	uChan, _ := s.UserChannelCreate(robberID)
	msg, _ := s.ChannelMessageSend(uChan.ID, robberMsg)
	for i := 0; i < len(wfd.UserIDs); i++ {
		s.MessageReactionAdd(uChan.ID, msg.ID, eNum[i])
	}

	<-wfd.TimingChan
	wfd.CurStage = "TroubleMaker"
	s.ChannelMessageSend(wfd.UseChannelID, "Í∞ïÎèÑÏùò Ï∞®Î°Ä Ï¢ÖÎ£å.")

}

func tmTask(s *discordgo.Session, wfd *WF.WFData) {
	s.ChannelMessageSend(wfd.UseChannelID, "ÎßêÏçΩÏüÅÏù¥Ïùò Ï∞®Î°ÄÏûÖÎãàÎã§.")

	tmID := ""
	tmMsg := "ÏûêÏã†ÏùÄ ÏÑ†ÌÉùÌï† Ïàò ÏóÜÏñ¥Ïöî\n"
	for i, item := range wfd.UserIDs {
		if wfd.UserRole[item] == "ÎßêÏçΩÏüÅÏù¥" {
			tmID = item
			tmMsg += "~~"
		}
		user, _ := s.User(item)
		tmMsg += "<" + strconv.Itoa(i+1) + "Î≤à ÏÇ¨Ïö©Ïûê: " + user.Username + ">\t"
		if wfd.UserRole[item] == "ÎßêÏçΩÏüÅÏù¥" {
			tmMsg += "~~"
		}
	}
	if tmID == "" {
		go func() {
			time.Sleep(60 * time.Second)
			wfd.CurStage = "Insomniac"
			wfd.TimingChan <- true
		}()
	}
	if tmID == "" {
		<-wfd.TimingChan
		s.ChannelMessageSend(wfd.UseChannelID, "ÎßêÏçΩÏüÅÏù¥Ïùò Ï∞®Î°Ä Ï¢ÖÎ£å.")
		return
	}
	uChan, _ := s.UserChannelCreate(tmID)
	msg, _ := s.ChannelMessageSend(uChan.ID, tmMsg)
	for i := 0; i < len(wfd.UserIDs); i++ {
		s.MessageReactionAdd(uChan.ID, msg.ID, eNum[i])
	}

	<-wfd.TimingChan
	s.ChannelMessageSend(wfd.UseChannelID, "ÎßêÏçΩÏüÅÏù¥Ïùò Ï∞®Î°Ä Ï¢ÖÎ£å.")

}

func insomniacTask(s *discordgo.Session, wfd *WF.WFData) {
	s.ChannelMessageSend(wfd.UseChannelID, "Î∂àÎ©¥Ï¶ùÌôòÏûêÏùò Ï∞®Î°ÄÏûÖÎãàÎã§.")

	go func() {
		time.Sleep(10 * time.Second)
		wfd.CurStage = "Day"
		wfd.TimingChan <- true
	}()

	inID := ""
	for _, item := range wfd.UserIDs {
		if wfd.UserRole[item] == "Î∂àÎ©¥Ï¶ùÌôòÏûê" {
			inID = item
		}
	}

	if inID == "" {
		<-wfd.TimingChan
		s.ChannelMessageSend(wfd.UseChannelID, "Î∂àÎ©¥Ï¶ùÌôòÏûêÏùò Ï∞®Î°Ä Ï¢ÖÎ£å.")
		return
	}

	uChan, _ := s.UserChannelCreate(inID)
	s.ChannelMessageSend(uChan.ID, "Îã§Î•∏ Î™®Îì† ÏÇ¨ÎûåÏù¥ Îä•Î†•ÏùÑ Ïì¥ ÌõÑ, ÎãπÏã†Ïùò Ïó≠Ìï†ÏùÄ Îã§ÏùåÍ≥º Í∞ôÏäµÎãàÎã§."+
		"\nÏó≠Ìï†: "+wfd.FinalRole[inID])

	<-wfd.TimingChan
	s.ChannelMessageSend(wfd.UseChannelID, "Î∂àÎ©¥Ï¶ùÌôòÏûêÏùò Ï∞®Î°Ä Ï¢ÖÎ£å.")

}

func getRoleInfo(role string) string {
	info := ""

	if role == "ÎäëÎåÄÏù∏Í∞Ñ" {
		info = "ÎãπÏã†ÏùÄ ÌîºÏóê Íµ∂Ï£ºÎ¶∞ ÎäëÎåÄÏù∏Í∞ÑÏûÖÎãàÎã§." +
			"\nÎãπÏã†ÏùÄ Í≤åÏûÑÏù¥ ÏãúÏûëÎêú ÌõÑÏóê ÎèôÎ£å ÎäëÎåÄÏù∏Í∞ÑÏùÑ ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§." +
			"\nÎßåÏïΩ ÎèôÎ£å ÎäëÎåÄÏù∏Í∞ÑÏù¥ ÏóÜÎã§Î©¥, ÏïÑÎ¨¥ÏóêÍ≤åÎèÑ Î∞∞Ï†ïÎêòÏßÄ ÏïäÏùÄ Ïó≠Ìï† Ïπ¥ÎìúÎì§ 3Ïû• Ï§ë 1Ïû•ÏùÑ" +
			"\nÎ¨¥ÏûëÏúÑÎ°ú ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§." +
			"\nÎãπÏã†ÏùÑ ÎèÑÏôÄÏ§Ñ ÌïòÏàòÏù∏ ÌïúÎ™ÖÏù¥ ÏûàÏùÑÏàòÎèÑ, ÏóÜÏùÑÏàòÎèÑ ÏûàÏäµÎãàÎã§." +
			"\nÏäπÎ¶¨Î•º ÏúÑÌï¥ÏÑúÎäî ÎãπÏã†Í≥º ÎãπÏã†Ïùò ÎèôÎ£å ÎäëÎåÄÏù∏Í∞Ñ Ï§ë ÏïÑÎ¨¥ÎèÑ Ï£ΩÏñ¥ÏÑúÎäî ÏïàÎê©ÎãàÎã§." +
			"\nÎòêÌïú Î¨¥ÎëêÏû•Ïù¥Í∞Ä ÏûêÏÇ¥Ïóê ÏÑ±Í≥µÌïúÎã§Î©¥, ÎãπÏã†ÏùÄ Ìå®Î∞∞ÌïòÍ≤å Îê©ÎãàÎã§." +
			"\n**Î≥¥Î¶ÑÎã¨Ïù¥ Îú®Í∏∞ Ï†Ñ ÎßàÏùÑ ÏÇ¨ÎûåÎì§ÏùÑ ÌòºÎûÄÏóê Îπ†Îú®Î¶¨ÏÑ∏Ïöî. ÌñâÏö¥ÏùÑ ÎπïÎãàÎã§!**"
	}
	if role == "Î¨¥ÎëêÏû•Ïù¥" {
		info = "ÎãπÏã†ÏùÄ ÏùºÏóê ÏßÄÏ≥ê Í∑πÎã®Ï†Å ÏÑ†ÌÉùÏùÑ ÍøàÍæ∏Îäî Î¨¥ÎëêÏû•Ïù¥ÏûÖÎãàÎã§." +
			"\nÎãπÏã†ÏùÄ ÎßàÏùÑ ÏãúÎØºÎì§Ïù¥ ÎäëÎåÄÏù∏Í∞ÑÏóêÍ≤å Ï£ΩÎì† ÎßêÎì† ÏïÑÎ¨¥Îü∞ Í¥ÄÏã¨Ïù¥ ÏóÜÏäµÎãàÎã§." +
			"\nÏôúÎÉêÌïòÎ©¥ ÎãπÏã†ÏùÄ Îçî Ïù¥ÏÉÅ Ìù¨ÎßùÏù¥ Î≥¥Ïù¥ÏßÄ ÏïäÏùÄ ÏÇ∂ÏùÑ Ïù¥Ïñ¥Í∞ÄÍ≥† ÏûàÏúºÎãàÍπåÏöî.." +
			"\nÎãπÏã†ÏùÄ Ìà¨ÌëúÎ°ú ÎãπÏã†Ïù¥ Ï≤òÌòïÎãπÌïòÍ∏∏ Î∞îÎùºÍ≥† ÏûàÏäµÎãàÎã§." +
			"\nÏÇ¨ÎûåÎì§Ïù¥ ÎãπÏã†ÏùÑ ÎäëÎåÄÏù∏Í∞ÑÏù¥ÎùºÍ≥† ÎØøÍ≤å ÌïòÏÑ∏Ïöî. ÎãπÏã†Ïù¥ Ï£ΩÎäîÎã§Î©¥, ÎãπÏã†Ïùò ÏäπÎ¶¨ÏûÖÎãàÎã§." +
			"\nÎãπÏã†Ïù¥ Ï£ΩÏúºÎ©¥ ÎßàÏùÑ ÏÇ¨ÎûåÎì§Í≥º ÎäëÎåÄÏù∏Í∞ÑÎì§ÏùÄ Ìå®Î∞∞Ìï©ÎãàÎã§." +
			"\n**ÎãπÏã†Ïùò Î∂àÏö¥ÏùÑ Ïó¨Í∏∞ÏÑú Î©àÏ∂îÍ≥† Ïã∂Îã§Î©¥, Ïù¥Ï†ú ÏòÅÏõêÌïú Ïû†Ïóê Îπ†Ïßà ÎïåÏûÖÎãàÎã§.. ÏïàÌÉÄÍπùÏßÄÎßå, ÌñâÏö¥ÏùÑ ÎπïÎãàÎã§...**"
	}
	if role == "ÎßàÏùÑÏ£ºÎØº" {
		info = "ÎãπÏã†ÏùÄ ÏïÑÎ¨¥Îü∞ Îä•Î†•ÎèÑ Í∞ÄÏßÄÏßÄ Î™ªÌñàÏäµÎãàÎã§." +
			"\nÎ∂àÏïàÍ≥º Í≥µÌè¨ÏÜçÏóêÏÑú ÎäëÎåÄÏù∏Í∞ÑÏùÑ Ï∞æÏïÑÏÑú Ï≤òÌòïÌïòÏÑ∏Ïöî"
	}
	if role == "ÌïòÏàòÏù∏" {
		info = "ÎãπÏã†ÏùÄ ÎäëÎåÄÏù∏Í∞ÑÎì§ÏùÑ ÏúÑÌï¥ Î™©Ïà®Î∞îÏπ† Í∞ÅÏò§Í∞Ä ÎêòÏñ¥ ÏûàÎäî ÌïòÏàòÏù∏ÏûÖÎãàÎã§." +
			"\nÎãπÏã†ÏùÄ ÎàÑÍ∞Ä ÎäëÎåÄÏù∏Í∞ÑÏù∏ÏßÄ Ïûò ÏïåÍ≥† ÏûàÏäµÎãàÎã§." +
			"\nÌïòÏßÄÎßå ÎäëÎåÄÏù∏Í∞ÑÎì§ÏùÄ ÎãπÏã†Ïù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄÏ°∞Ï∞®ÎèÑ ÏïåÏßÄ Î™ªÌï¥Ïöî.." +
			"\nÎãπÏã†ÏùÄ ÎãπÏã†Ïù¥ Ï≤òÌòïÎãπÌïòÎäî ÌïúÏù¥ ÏûàÎçîÎùºÎèÑ ÎäëÎåÄÏù∏Í∞ÑÏùÑ ÏßÄÏºúÏïº Ìï©ÎãàÎã§." +
			"\nÏïÑÎ¨¥ÎèÑ ÎäëÎåÄÏù∏Í∞ÑÏù¥ ÏïÑÎãå Ï≤ô ÌïòÎäî Í≤ÉÎèÑ Ï¢ãÏùÄ Î∞©Î≤ïÏùº Í≤ÅÎãàÎã§." +
			"\nÎ¨¥ÎëêÏû•Ïù¥Í∞Ä ÏûêÏÇ¥ÌïòÎäîÍ≤ÉÏùÑ ÎßâÎäî Í≤É ÎòêÌïú ÎãπÏã†Ïùò ÏûÑÎ¨¥ÏûÖÎãàÎã§." +
			"\n**ÎÇ¥ÏùºÏùÄ Î≥¥Î¶ÑÎã¨Ïù¥ÎÑ§Ïöî.. ÌñâÏö¥ÏùÑ ÎπïÎãàÎã§!**"
	}
	if role == "ÏòàÏñ∏Ïûê" {
		info = "ÎãπÏã†ÏùÄ Ïû•ÎßâÏùÑ Îì§Ï∂îÍ≥† ÎØ∏ÎûòÎ•º ÏóøÎ≥¥ÏïòÏßÄÎßå Í∑∏Í≥≥Ïóî Ïò§ÏßÅ... Î≥¥Î¶ÑÎã¨ ÎøêÏù¥ÏóàÏäµÎãàÎã§." +
			"\nÎãπÏã†ÏùÄ ÏïÑÎ¨¥ÏóêÍ≤åÎèÑ Î∞∞Ï†ïÎêòÏßÄ ÏïäÏùÄ Ïó≠Ìï† 3Ïû• Ï§ë 2Ïû•ÏùÑ Î≥¥Í±∞ÎÇò," +
			"\nÏõêÌïòÎäî ÏÇ¨Îûå ÌïúÎ™ÖÏùò Ïó≠Ìï†ÏùÑ Í∞ÑÌååÌï† Ïàò ÏûàÏäµÎãàÎã§." +
			"\nÎäëÎåÄÏù∏Í∞ÑÎì§ÏùÄ ÏòàÏñ∏ÏûêÌñâÏÑ∏Î•º ÌïòÎ©∞ ÎßàÏùÑÏãúÎØºÎì§ÏùÑ ÌòºÎûÄÏä§ÎüΩÍ≤å Ìï† ÏàòÎèÑ ÏûàÏäµÎãàÎã§." +
			"\nÏäπÎ¶¨Î•º ÏúÑÌï¥ÏÑ† ÏßÑÏßú ÎäëÎåÄÏù∏Í∞ÑÏùÑ Ï∞æÏïÑ Ï≤òÌòïÏãúÌÇ§ÏÑ∏Ïöî" +
			"\nÎäëÎåÄÏù∏Í∞ÑÎì§Í≥º ÌïòÏàòÏù∏Ïù¥ ÏïÑÎ¨¥ÎèÑ ÏóÜÎã§Î©¥, ÏïÑÎ¨¥ÎèÑ Ï≤òÌòïÏãúÌÇ§Î©¥ ÏïàÎê©ÎãàÎã§." +
			"\n**ÎßéÏùÄÍ±∏ ÏïåÍ≥† ÏûàÍ∏∞Ïóê, Îçî ÏùòÏã¨Î∞õÏùÑ Ïàò ÏûàÏñ¥Ïöî.. ÌñâÏö¥ÏùÑ ÎπïÎãàÎã§..**"
	}
	if role == "Í∞ïÎèÑ" {
		info = "ÎãπÏã†ÏùÄ ÎãπÏã†ÏóêÍ≤å ÌäπÎ≥ÑÌïú ÌûòÏù¥ ÏÉùÍ∏¥Í±∏ Ïïå Ïàò ÏûàÏóàÏäµÎãàÎã§." +
			"\nÎã§Î•∏ ÏÇ¨ÎûåÏùò Îä•Î†•ÍπåÏßÄ ÌõîÏ≥êÏò¨ Ïàò ÏûàÎäî Îä•Î†•Ïù¥Ï£†" +
			"\nÏõêÌïòÎäî ÏÇ¨ÎûåÏùò Îä•Î†•ÏùÑ ÏïåÏïÑÎÇº Ïàò ÏûàÏäµÎãàÎã§." +
			"\nÍ∑∏Î¶¨Í≥† Í∑∏ ÏÇ¨ÎûåÍ≥º Îä•Î†•ÏùÑ Î∞îÍøîÏπòÍ∏∞Ìï©ÎãàÎã§." +
			"\nÎäëÎåÄÏù∏Í∞ÑÏùò Îä•Î†•ÏùÑ ÌõîÏ≥§Îã§Î©¥, ÎäëÎåÄÏù∏Í∞ÑÏùÑ ÏßÄÏºúÏïºÌï©ÎãàÎã§." +
			"\nÌõîÏπú Îä•Î†•Ïù¥ ÎßàÎïÖÏπò ÏïäÎã§Î©¥, ÎäëÎåÄÏù∏Í∞ÑÏùÑ Ï≤òÌòïÏãúÏºúÏïº Ìï¥Ïöî." +
			"\n**ÎãπÏã†Ïùò Ïö¥ÏùÑ ÏãúÌóòÌï¥ Î≥¥ÏÑ∏Ïöî, ÌñâÏö¥ÏùÑ ÎπïÎãàÎã§.**"
	}
	if role == "ÎßêÏçΩÏüÅÏù¥" {
		info = "ÎãπÏã† Îòê Î¨¥Ïä®ÏßìÏùÑ Ìïú Í±∞Ï£†?" +
			"\nÏù¥Îü∞! Îëê ÏÇ¨ÎûåÏùò Îä•Î†•ÏùÑ Î∞îÍøîÎ≤ÑÎ¶¨Îã§Îãà!" +
			"\nÏñ¥Îñ§ Îä•Î†•Ïù∏ÏßÑ ÏµúÏÜåÌïú ÏïåÍ≥† Î∞îÍøîÏïºÏ£†... Ï†ïÎßê Ïù¥Î¶ÑÍ∞í ÌïòÎäîÍµ∞Ïöî" +
			"\nÏñ¥Ìú¥... Í∑∏ÎûòÎèÑ Ïö∞Î¶∞ ÎäëÎåÄÏù∏Í∞ÑÏùÑ Ï≤òÌòïÏãúÏºúÏïº Ìï¥Ïöî." +
			"\n**Îã§ÏùåÏóî ÎßêÏçΩ ÏïàÌîºÏö∞Í∏∞Î°ú ÏïΩÏÜçÌï©ÏãúÎã§. ÌñâÏö¥ÏùÑ ÎπåÏñ¥Ïöî!**"
	}
	if role == "Î∂àÎ©¥Ï¶ùÌôòÏûê" {
		info = "Ïò§Îäò Î∞§ÏùÄ Ïû†Ïù¥ Ïò¨ÍπåÏöî..." +
			"\nÏÉàÎ≤ΩÏóê Íπ®Ïñ¥ÎÇò Ïû†ÏùÑ ÏÑ§ÏπòÏßÑ ÏïäÏùÑÍπåÏöî..." +
			"\nÎãπÏã†ÏùÄ Îã§Î•∏ ÏÇ¨ÎûåÎì§Ïù¥ Î∞§ÏÇ¨Ïù¥ ÌñàÎçò Î™®Îì† ÏùºÎì§Ïù¥ ÎãπÏã†Ïùò Ïó≠Ìï†ÏùÑ Ïñ¥ÎñªÍ≤å Î∞îÍøîÎÜìÏïòÎäîÏßÄ" +
			"\nÏïÑÎãàÎ©¥ Í∑∏Ï†Ä ÏïÑÎ¨¥Í≤ÉÎèÑ Î≥ÄÌïúÍ≤å ÏóÜÎäîÏßÄ Ïïå Ïàò ÏûàÏñ¥Ïöî." +
			"\nÎãπÏã†Ïù¥ ÎäëÎåÄÏù∏Í∞ÑÏù¥ ÎêòÏóàÎã§Î©¥, ÎäëÎåÄÏù∏Í∞ÑÏùÑ ÏßÄÏºúÏïºÏ£†" +
			"\nÍ∑∏Í≤å ÏïÑÎãàÎùºÎ©¥.. ÎäëÎåÄÏù∏Í∞ÑÏùÑ Íº≠ Ï∞æÏïÑÎÇ¥ÏÑ∏Ïöî!" +
			"\n**Ïò§Îäò Î∞§ÏùÄ Îëê Îã§Î¶¨ Ï≠â ÎªóÍ≥† Îã®Ïû†Ïóê Îπ†Ïßà Ïàò ÏûàÍ∏∞Î•º.. ÌñâÏö¥ÏùÑ ÎπåÏñ¥Ïöî!**"
	}

	return info
}

// ÏÉàÎ°úÏö¥ Ïú†Ï†Ä Îì±Î°ùÏãú ÏàòÌñâ
func newUserTask(m *discordgo.MessageCreate) {
	wfd := wfDataMap[m.GuildID]
	if len(wfd.UserIDs) >= MaxUser {
		return
	}
	isUserIn[m.Author.ID] = true
	uidToGid[m.Author.ID] = m.GuildID
	wfd.AppendUser(m.Author.ID)
}

// Í≤åÏûÑ Ï∑®ÏÜåÏãú Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÏàòÌñâ
func cancelGameTask(m *discordgo.MessageCreate) {
	wfd := wfDataMap[m.GuildID]
	for _, item := range wfd.UserIDs {
		uidToGid[item] = ""
		isUserIn[item] = false
	}
	wfd.UserIDs = make([]string, 0, MaxUser)
	isGuildIn[m.GuildID] = false
}

func homeworkMethod(s *discordgo.Session, m *discordgo.MessageCreate) {
	if strings.HasPrefix(m.Content, "=info") {
		if len(m.Mentions) == 0 {
			_, _ = s.ChannelMessageSend(m.ChannelID, "Your message doesn't have any mentions!")
			return
		}
		msg := ""
		for i, item := range m.Mentions {
			msg = strconv.Itoa(i+1) + "Î≤àÏß∏ Î©òÏÖò Ï†ïÎ≥¥\n" +
				"UID:\t" + item.ID + "\n" +
				"Username:\t" + item.Username + "\n" +
				"Mention:\t" + item.Mention() + "\n"
			_, _ = s.ChannelMessageSend(m.ChannelID, msg)
		}
	}
	if strings.HasPrefix(m.Content, "=save") {
		if len(m.Mentions) == 0 {
			_, _ = s.ChannelMessageSend(m.ChannelID, "Your message doesn't have any mentions!")
			return
		}
		if len(m.Mentions) > 3 {
			_, _ = s.ChannelMessageSend(m.ChannelID, "Your message contains too many mentions!")
			return
		}
		msg := ""
		for i, item := range m.Mentions {
			hwUserIDs = append(hwUserIDs, item.ID)
			msg = "Ï¥ù " + strconv.Itoa(i+1) + "Î™ÖÏùò ÏÇ¨Ïö©ÏûêÎ•º Ï†ÄÏû•ÌïòÏòÄÏäµÎãàÎã§."
		}
		_, _ = s.ChannelMessageSend(m.ChannelID, msg)
	}
	if m.Content == "=load" {
		if len(hwUserIDs) == 0 {
			_, _ = s.ChannelMessageSend(m.ChannelID, "Your server doesn't have any user ID")
			return
		}
		msg := ""
		for i, item := range hwUserIDs {
			user, _ := s.User(item)
			msg = strconv.Itoa(i+1) + "Î≤àÏß∏ Ï†ÄÏû•Îêú Ï†ïÎ≥¥\n" +
				"UID:\t" + user.ID + "\n" +
				"Username:\t" + user.Username + "\n" +
				"Mention:\t" + user.Mention() + "\n"
			_, _ = s.ChannelMessageSend(m.ChannelID, msg)
		}
	}
	if m.Content == "=delete" {
		if len(hwUserIDs) == 0 {
			_, _ = s.ChannelMessageSend(m.ChannelID, "Ï†ÄÏû•Îêú Ï†ïÎ≥¥Í∞Ä ÏóÜÏóàÏäµÎãàÎã§.")
			return
		}
		hwUserIDs = make([]string, 0, 10)
		msg := "Î™®Îì† ÏûÖÎ†•Îêú Îç∞Ïù¥ÌÑ∞Îì§ÏùÑ ÏÇ≠Ï†úÌïòÏòÄÏäµÎãàÎã§."
		_, _ = s.ChannelMessageSend(m.ChannelID, msg)
	}
}
